import { useState } from "react";
import { jsPDF } from "jspdf";
import { db } from "../db/schema.js";
import Chart from "chart.js/auto";

export default function PDFExporter() {
  const [showModal, setShowModal] = useState(false);
  const [acknowledged, setAcknowledged] = useState(false);
  const [userName, setUserName] = useState("");
  const [sections, setSections] = useState({
    symptoms: true,
    weight: true,
    calories: true,
    medication: true,
    work: true,
    sleep: true,
    nicotine: true,
  });

  const toggleSection = (key) => {
    setSections((prev) => ({ ...prev, [key]: !prev[key] }));
  };

  const addFooter = (doc, userName) => {
    const pageCount = doc.internal.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(10);
      doc.setTextColor(150);
      doc.text(userName, 14, 290);
      doc.text(`Page ${i} of ${pageCount}`, 200, 290, { align: "right" });
    }
  };

  const handleGenerate = async () => {
    if (!acknowledged || !userName.trim()) {
      alert("Please enter your name and acknowledge the warning.");
      return;
    }
    setShowModal(false);
    await generatePDF();
  };

  const generatePDF = async () => {
    const doc = new jsPDF();

    // Collect date range
    let allDates = [];
    if (sections.symptoms) {
      const symptoms = await db.symptoms.toArray();
      allDates.push(...symptoms.map((s) => new Date(s.date)));
    }
    if (sections.weight) {
      const weights = await db.weight.toArray();
      allDates.push(...weights.map((w) => new Date(w.date)));
    }
    if (sections.calories) {
      const calories = await db.calories.toArray();
      allDates.push(...calories.map((c) => new Date(c.date)));
    }
    if (sections.medication) {
      const meds = await db.medication.toArray();
      allDates.push(...meds.map((m) => new Date(m.date)));
    }
    if (sections.work) {
      const work = await db.work.toArray();
      allDates.push(...work.map((w) => new Date(w.weekStart)));
    }
    if (sections.sleep) {
      const sleep = await db.sleep.toArray();
      allDates.push(...sleep.map((s) => new Date(s.date)));
    }
    if (sections.nicotine) {
      const nicotine = await db.nicotine.toArray();
      allDates.push(...nicotine.map((n) => new Date(n.date)));
    }

    let dateRange = "No data available";
    if (allDates.length > 0) {
      const minDate = new Date(Math.min(...allDates));
      const maxDate = new Date(Math.max(...allDates));
      dateRange = `${minDate.toLocaleDateString("en-US")} → ${maxDate.toLocaleDateString("en-US")}`;
    }

    // Cover Page
    doc.setFontSize(26);
    doc.text(userName, 105, 60, { align: "center" });
    doc.setFontSize(20);
    doc.text("Health Tracker Report", 105, 80, { align: "center" });
    doc.setFontSize(14);
    doc.text(`Date Range: ${dateRange}`, 105, 100, { align: "center" });
    doc.setFontSize(10);
    doc.text("Generated by Health Tracker PWA", 105, 120, { align: "center" });

    // Add a new page for logs
    doc.addPage();
    let y = 20;

    // --- Symptoms Section ---
    if (sections.symptoms) {
      const symptoms = await db.symptoms.toArray();
      doc.setFontSize(14);
      doc.text("Symptom Logs", 14, y);
      y += 8;

      if (symptoms.length === 0) {
        doc.setFontSize(10);
        doc.text("No symptom entries available.", 14, y);
        y += 10;
      } else {
        doc.setFontSize(10);
        symptoms.forEach((log) => {
          if (y > 270) {
            doc.addPage();
            y = 20;
          }
          doc.text(
            `${log.date} | Pain: ${log.pain} | HR: ${log.heartRateCurrent}/${log.heartRateResting} | Emotional: ${log.emotionalState}`,
            14,
            y
          );
          y += 6;
          if (log.emotionalNotes) {
            doc.text(`Notes: ${log.emotionalNotes}`, 20, y);
            y += 6;
          }
          if (log.sensory && Object.keys(log.sensory).length > 0) {
            doc.text(
              `Sensory: ${Object.entries(log.sensory)
                .map(([k, v]) => `${k}(${v})`)
                .join(", ")}`,
              20,
              y
            );
            y += 6;
          }
          doc.text(
            `Calories: ${log.calories} | Medication: ${
              log.medication ? "Yes" : "No"
            }`,
            20,
            y
          );
          y += 10;
        });
      }
      doc.addPage();
      y = 20;
    }

    // --- Weight Section ---
    if (sections.weight) {
      const weights = await db.weight.toArray();
      doc.setFontSize(14);
      doc.text("Weight Logs", 14, y);
      y += 8;

      if (weights.length === 0) {
        doc.setFontSize(10);
        doc.text("No weight entries available.", 14, y);
        y += 10;
      } else {
        doc.setFontSize(10);
        weights.forEach((entry) => {
          if (y > 270) {
            doc.addPage();
            y = 20;
          }
          doc.text(`${entry.date} | Weight: ${entry.value} lbs`, 14, y);
          y += 6;
        });

        // Chart
        const canvas = document.createElement("canvas");
        const ctx = canvas.getContext("2d");
        new Chart(ctx, {
          type: "line",
          data: {
            labels: weights.map((w) => w.date),
            datasets: [
              {
                label: "Weight (lbs)",
                data: weights.map((w) => w.value),
                borderColor: "rgba(138, 43, 226, 1)",
                backgroundColor: "rgba(138, 43, 226, 0.2)",
                fill: true,
              },
              {
                label: "Goal (160 lbs)",
                data: weights.map(() => 160),
                borderColor: "rgba(34, 197, 94, 1)",
                borderDash: [5, 5],
                fill: false,
              },
            ],
          },
          options: { animation: false, responsive: false },
        });
        const imgData = canvas.toDataURL("image/png");
        doc.addImage(imgData, "PNG", 14, y, 180, 80);
        y += 90;
      }
      doc.addPage();
      y = 20;
    }

    // --- Calories Section ---
    if (sections.calories) {
      const calories = await db.calories.toArray();
      doc.setFontSize(14);
      doc.text("Calorie Logs", 14, y);
      y += 8;

      if (calories.length === 0) {
        doc.setFontSize(10);
        doc.text("No calorie entries available.", 14, y);
        y += 10;
      } else {
        doc.setFontSize(10);
        calories.forEach((entry) => {
          if (y > 270) {
            doc.addPage();
            y = 20;
          }
          doc.text(`${entry.date} | Calories: ${entry.value}`, 14, y);
          y += 6;
        });

        // Chart
        const canvas = document.createElement("canvas");
        const ctx = canvas.getContext("2d");
        new Chart(ctx, {
          type: "bar",
          data: {
            labels: calories.map((c) => c.date),
            datasets: [
              {
                label: "Calories",
                data: calories.map((c) => c.value),
                backgroundColor: "rgba(34, 197, 94, 0.7)",
              },
            ],
          },
          options: { animation: false, responsive: false },
        });
        const imgData = canvas.toDataURL("image/png");
        doc.addImage(imgData, "PNG", 14, y, 180, 80);
        y += 90;
      }
      doc.addPage();
      y = 20;
    }

    // --- Medication Section ---
    if (sections.medication) {
      const meds = await db.medication.toArray();
      doc.setFontSize(14);
      doc.text("Medication Logs", 14, y);
      y += 8;

      if (meds.length === 0) {
        doc.setFontSize(10);
        doc.text("No medication entries available.", 14, y);
        y += 10;
      } else {
        doc.setFontSize(10);
        meds.forEach((entry) => {
          if (y > 270) {
            doc.addPage();
            y = 20;
          }
          doc.text(`${entry.date} | Time: ${entry.time} | Taken: ✅`, 14, y);
          y += 6;
        });
      }
      doc.addPage();
      y = 20;
    }

    // --- Work Section ---
    if (sections.work) {
      const work = await db.work.toArray();
      doc.setFontSize(14);
      doc.text("Work Logs", 14, y);
      y += 8;

      if (work.length === 0) {
        doc.setFontSize(10);
        doc.text("No work entries available.", 14, y);
        y += 10;
      } else {
        doc.setFontSize(10);
        work.forEach((entry) => {
          if (y > 270) {
            doc.addPage();
            y = 20;
          }
          doc.text(`${entry.weekStart} | Hours: ${entry.hours}`, 14, y);
          y += 6;
        });

        // Chart
        const canvas = document.createElement("canvas");
        const ctx = canvas.getContext("2d");
        new Chart(ctx, {
          type: "bar",
          data: {
            labels: work.map((w) => w.weekStart),
            datasets: [
              {
                label: "Hours Worked",
                data: work.map((w) => w.hours),
                backgroundColor: "rgba(59, 130, 246, 0.7)",
              },
              {
                label: "Target (35 hrs)",
                data: work.map(() => 35),
                borderColor: "rgba(34, 197, 94, 1)",
                type: "line",
                fill: false,
              },
            ],
          },
          options: { animation: false, responsive: false },
        });
        const imgData = canvas.toDataURL("image/png");
        doc.addImage(imgData, "PNG", 14, y, 180, 80);
        y += 90;
      }
      doc.addPage();
      y = 20;
    }

    // --- Sleep Section ---
    if (sections.sleep) {
      const sleep = await db.sleep.toArray();
      doc.setFontSize(14);
      doc.text("Sleep Logs", 14, y);
      y += 8;

      if (sleep.length === 0) {
        doc.setFontSize(10);
        doc.text("No sleep entries available.", 14, y);
        y += 10;
      } else {
        doc.setFontSize(10);
        sleep.forEach((entry) => {
          if (y > 270) {
            doc.addPage();
            y = 20;
          }
          doc.text(`${entry.date} | Hours Slept: ${entry.hours}`, 14, y);
          y += 6;
        });

        // Chart
        const canvas = document.createElement("canvas");
        const ctx = canvas.getContext("2d");
        new Chart(ctx, {
          type: "bar",
          data: {
            labels: sleep.map((s) => s.date),
            datasets: [
              {
                label: "Hours Slept",
                data: sleep.map((s) => s.hours),
                backgroundColor: "rgba(168, 85, 247, 0.7)",
              },
              {
                label: "Minimum (6 hrs)",
                data: sleep.map(() => 6),
                borderColor: "rgba(34, 197, 94, 1)",
                type: "line",
                fill: false,
              },
            ],
          },
          options: { animation: false, responsive: false },
        });
        const imgData = canvas.toDataURL("image/png");
        doc.addImage(imgData, "PNG", 14, y, 180, 80);
        y += 90;
      }
      doc.addPage();
      y = 20;
    }

    // --- Nicotine Section ---
    if (sections.nicotine) {
      const nicotine = await db.nicotine.toArray();
      doc.setFontSize(14);
      doc.text("Nicotine Logs", 14, y);
      y += 8;

      if (nicotine.length === 0) {
        doc.setFontSize(10);
        doc.text("No nicotine entries available.", 14, y);
        y += 10;
      } else {
        doc.setFontSize(10);
        nicotine.forEach((entry) => {
          if (y > 270) {
            doc.addPage();
            y = 20;
          }
          doc.text(
            `${entry.date} | Uses: ${entry.uses} | Target: ${entry.target}`,
            14,
            y
          );
          y += 6;
        });

        // Chart
        const canvas = document.createElement("canvas");
        const ctx = canvas.getContext("2d");
        new Chart(ctx, {
          type: "line",
          data: {
            labels: nicotine.map((n) => n.date),
            datasets: [
              {
                label: "Uses",
                data: nicotine.map((n) => n.uses),
                borderColor: "rgba(255, 99, 71, 1)",
                backgroundColor: "rgba(255, 99, 71, 0.2)",
                fill: true,
              },
              {
                label: "Target",
                data: nicotine.map((n) => n.target),
                borderColor: "rgba(34, 197, 94, 1)",
                borderDash: [5, 5],
                fill: false,
              },
            ],
          },
          options: { animation: false, responsive: false },
        });
        const imgData = canvas.toDataURL("image/png");
        doc.addImage(imgData, "PNG", 14, y, 180, 80);
        y += 90;
      }
    }

    // Footer
    addFooter(doc, userName);

    // Save PDF
    doc.save("health-tracker-report.pdf");
  };

  return (
    <div className="card p-6 rounded-2xl shadow-lg hover:shadow-2xl transition-all">
      <h2 className="text-lg font-bold mb-2">Export Data</h2>

      {/* Module selection */}
      <div className="space-y-2 mb-4">
        {Object.keys(sections).map((key) => (
          <label key={key} className="flex items-center space-x-2">
            <input
              type="checkbox"
              checked={sections[key]}
              onChange={() => toggleSection(key)}
            />
            <span className="capitalize">{key}</span>
          </label>
        ))}
      </div>

      {/* User name input */}
      <input
        type="text"
        placeholder="Enter your name"
        value={userName}
        onChange={(e) => setUserName(e.target.value)}
        className="w-full p-2 mb-4 rounded-xl border border-gray-300 dark:border-gray-600 focus:ring-2 focus:ring-blue-400 focus:outline-none"
      />

      <button
        onClick={() => setShowModal(true)}
        className="w-full bg-gradient-to-r from-blue-500 to-indigo-500 text-white px-4 py-3 rounded-xl font-semibold hover:scale-[1.02] hover:shadow-lg transition-all"
      >
        Generate PDF Report
      </button>

      {/* Modal */}
      {showModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white dark:bg-gray-800 p-6 rounded-2xl shadow-lg max-w-md w-full space-y-4">
            <h3 className="text-lg font-bold text-red-600">
              ⚠️ Sensitive Data Warning
            </h3>
            <p className="text-sm text-gray-700 dark:text-gray-300">
              This PDF may contain sensitive health information. Be cautious
              when sharing it. Once exported, the data is outside the app’s
              control. Protect your privacy and avoid sharing with untrusted
              parties.
            </p>
            <label className="flex items-center space-x-2">
              <input
                type="checkbox"
                checked={acknowledged}
                onChange={() => setAcknowledged(!acknowledged)}
              />
              <span>I have read and understand the risks</span>
            </label>
            <button
              onClick={handleGenerate}
              className="w-full bg-gradient-to-r from-red-500 to-pink-500 text-white px-4 py-2 rounded-xl font-semibold hover:scale-[1.02] hover:shadow-lg transition-all"
            >
              Confirm & Generate PDF
            </button>
            <button
              onClick={() => setShowModal(false)}
              className="w-full bg-gray-300 dark:bg-gray-700 text-gray-800 dark:text-gray-200 px-4 py-2 rounded-xl font-semibold hover:shadow-md transition-all"
            >
              Cancel
            </button>
          </div>
        </div>
      )}
    </div>
  );
}
